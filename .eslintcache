[{"c:\\react\\tictactoe\\src\\App.js":"1","c:\\react\\tictactoe\\src\\components\\Icons.js":"2","C:\\react\\tictactoe\\src\\index.js":"3","C:\\react\\tictactoe\\src\\components\\Icons.js":"4","C:\\react\\tictactoe\\src\\reportWebVitals.js":"5","C:\\react\\tictactoe\\src\\App.js":"6"},{"size":495,"mtime":1606839367917,"results":"7","hashOfConfig":"8"},{"size":332,"mtime":1606838252034,"results":"9","hashOfConfig":"8"},{"size":500,"mtime":1606473510685,"results":"10","hashOfConfig":"11"},{"size":390,"mtime":1606976664802,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1606473510685,"results":"13","hashOfConfig":"11"},{"size":2012,"mtime":1606985952257,"results":"14","hashOfConfig":"11"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"r4ps5b",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1px5uk0",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"c:\\react\\tictactoe\\src\\App.js",[],"c:\\react\\tictactoe\\src\\components\\Icons.js",[],"C:\\react\\tictactoe\\src\\index.js",[],"C:\\react\\tictactoe\\src\\components\\Icons.js",[],"C:\\react\\tictactoe\\src\\reportWebVitals.js",[],"C:\\react\\tictactoe\\src\\App.js",["28"],"import React,{useState} from \"react\";\nimport Icons from \"./components/Icons\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\n\nimport {Card,CardBody,Container,Button,Col,Row} from \"reactstrap\";\n\n\nconst itemArray = new Array(9).fill(\"empty\");\nfunction App() {\n\n  const [IsCross, setIsCross] = useState(false);\n  const [WinMessage, setWinMessage] = useState(\"\");\n\n  const reloadGame = () => {\n    setIsCross(false);\n    setWinMessage(\"\");\n    itemArray.fill(\"empty\",0,9);\n  };\n\n  const checkIsWinner = () => {\n    //\n  };\n\n  const changeItem = (itemNumber) => {\n    if (WinMessage) {\n      return toast(WinMessage,{type:\"success\"});\n    }\n\n    if(itemArray[itemNumber]===\"empty\"){\n      itemArray[itemNumber] = (IsCross) ? \"cross\" : \"circle\";\n      setIsCross(!IsCross);\n    }else{\n      return toast(\"already filled\",{type:\"error\"});\n    }\n  };\n\n  return (\n      <Container className = \"p-5\">\n        <ToastContainer position=\"bottom-center\" />\n        <Row>\n          <Col md={6} className=\"offset-md-3\">\n            {WinMessage ? (\n              <div className=\"mb-2 mt-2\">\n                <h1 className=\"text-uppercase text-center text-success \">\n                  {WinMessage}\n                </h1>\n                <Button color=\"success\" block onClick={reloadGame}>Reload the game</Button>\n              </div>\n            ) : (\n              <h1 className=\"text-center text-warning\">\n                {IsCross ? \"Cross\" : \"Circle\"} turns\n              </h1>\n            )}\n            <div className=\"grid\">\n              {itemArray.map((item,index) => (\n                <Card color=\"warning\" onClick={ () => changeItem(index)}>\n                  <CardBody className=\"box\">\n                    <Icons name={item}/>\n                  </CardBody>\n                </Card>\n              ))}\n            </div>\n          </Col>\n        </Row>\n      </Container>\n  );\n};\n\nexport default App;\n",{"ruleId":"29","severity":1,"message":"30","line":26,"column":9,"nodeType":"31","messageId":"32","endLine":26,"endColumn":22},"no-unused-vars","'checkIsWinner' is assigned a value but never used.","Identifier","unusedVar"]